
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `favoritos` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model favoritos
 * 
 */
export type favoritosModel = runtime.Types.Result.DefaultSelection<Prisma.$favoritosPayload>

export type AggregateFavoritos = {
  _count: FavoritosCountAggregateOutputType | null
  _avg: FavoritosAvgAggregateOutputType | null
  _sum: FavoritosSumAggregateOutputType | null
  _min: FavoritosMinAggregateOutputType | null
  _max: FavoritosMaxAggregateOutputType | null
}

export type FavoritosAvgAggregateOutputType = {
  idUsuario: number | null
  idCuento: number | null
}

export type FavoritosSumAggregateOutputType = {
  idUsuario: number | null
  idCuento: number | null
}

export type FavoritosMinAggregateOutputType = {
  idUsuario: number | null
  idCuento: number | null
  fechaAgregado: Date | null
}

export type FavoritosMaxAggregateOutputType = {
  idUsuario: number | null
  idCuento: number | null
  fechaAgregado: Date | null
}

export type FavoritosCountAggregateOutputType = {
  idUsuario: number
  idCuento: number
  fechaAgregado: number
  _all: number
}


export type FavoritosAvgAggregateInputType = {
  idUsuario?: true
  idCuento?: true
}

export type FavoritosSumAggregateInputType = {
  idUsuario?: true
  idCuento?: true
}

export type FavoritosMinAggregateInputType = {
  idUsuario?: true
  idCuento?: true
  fechaAgregado?: true
}

export type FavoritosMaxAggregateInputType = {
  idUsuario?: true
  idCuento?: true
  fechaAgregado?: true
}

export type FavoritosCountAggregateInputType = {
  idUsuario?: true
  idCuento?: true
  fechaAgregado?: true
  _all?: true
}

export type FavoritosAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which favoritos to aggregate.
   */
  where?: Prisma.favoritosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of favoritos to fetch.
   */
  orderBy?: Prisma.favoritosOrderByWithRelationInput | Prisma.favoritosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.favoritosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` favoritos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` favoritos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned favoritos
  **/
  _count?: true | FavoritosCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FavoritosAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FavoritosSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FavoritosMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FavoritosMaxAggregateInputType
}

export type GetFavoritosAggregateType<T extends FavoritosAggregateArgs> = {
      [P in keyof T & keyof AggregateFavoritos]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFavoritos[P]>
    : Prisma.GetScalarType<T[P], AggregateFavoritos[P]>
}




export type favoritosGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.favoritosWhereInput
  orderBy?: Prisma.favoritosOrderByWithAggregationInput | Prisma.favoritosOrderByWithAggregationInput[]
  by: Prisma.FavoritosScalarFieldEnum[] | Prisma.FavoritosScalarFieldEnum
  having?: Prisma.favoritosScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FavoritosCountAggregateInputType | true
  _avg?: FavoritosAvgAggregateInputType
  _sum?: FavoritosSumAggregateInputType
  _min?: FavoritosMinAggregateInputType
  _max?: FavoritosMaxAggregateInputType
}

export type FavoritosGroupByOutputType = {
  idUsuario: number
  idCuento: number
  fechaAgregado: Date | null
  _count: FavoritosCountAggregateOutputType | null
  _avg: FavoritosAvgAggregateOutputType | null
  _sum: FavoritosSumAggregateOutputType | null
  _min: FavoritosMinAggregateOutputType | null
  _max: FavoritosMaxAggregateOutputType | null
}

type GetFavoritosGroupByPayload<T extends favoritosGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FavoritosGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FavoritosGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FavoritosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FavoritosGroupByOutputType[P]>
      }
    >
  >



export type favoritosWhereInput = {
  AND?: Prisma.favoritosWhereInput | Prisma.favoritosWhereInput[]
  OR?: Prisma.favoritosWhereInput[]
  NOT?: Prisma.favoritosWhereInput | Prisma.favoritosWhereInput[]
  idUsuario?: Prisma.IntFilter<"favoritos"> | number
  idCuento?: Prisma.IntFilter<"favoritos"> | number
  fechaAgregado?: Prisma.DateTimeNullableFilter<"favoritos"> | Date | string | null
}

export type favoritosOrderByWithRelationInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  fechaAgregado?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type favoritosWhereUniqueInput = Prisma.AtLeast<{
  idUsuario_idCuento?: Prisma.favoritosIdUsuarioIdCuentoCompoundUniqueInput
  AND?: Prisma.favoritosWhereInput | Prisma.favoritosWhereInput[]
  OR?: Prisma.favoritosWhereInput[]
  NOT?: Prisma.favoritosWhereInput | Prisma.favoritosWhereInput[]
  idUsuario?: Prisma.IntFilter<"favoritos"> | number
  idCuento?: Prisma.IntFilter<"favoritos"> | number
  fechaAgregado?: Prisma.DateTimeNullableFilter<"favoritos"> | Date | string | null
}, "idUsuario_idCuento">

export type favoritosOrderByWithAggregationInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  fechaAgregado?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.favoritosCountOrderByAggregateInput
  _avg?: Prisma.favoritosAvgOrderByAggregateInput
  _max?: Prisma.favoritosMaxOrderByAggregateInput
  _min?: Prisma.favoritosMinOrderByAggregateInput
  _sum?: Prisma.favoritosSumOrderByAggregateInput
}

export type favoritosScalarWhereWithAggregatesInput = {
  AND?: Prisma.favoritosScalarWhereWithAggregatesInput | Prisma.favoritosScalarWhereWithAggregatesInput[]
  OR?: Prisma.favoritosScalarWhereWithAggregatesInput[]
  NOT?: Prisma.favoritosScalarWhereWithAggregatesInput | Prisma.favoritosScalarWhereWithAggregatesInput[]
  idUsuario?: Prisma.IntWithAggregatesFilter<"favoritos"> | number
  idCuento?: Prisma.IntWithAggregatesFilter<"favoritos"> | number
  fechaAgregado?: Prisma.DateTimeNullableWithAggregatesFilter<"favoritos"> | Date | string | null
}

export type favoritosCreateInput = {
  idUsuario: number
  idCuento: number
  fechaAgregado?: Date | string | null
}

export type favoritosUncheckedCreateInput = {
  idUsuario: number
  idCuento: number
  fechaAgregado?: Date | string | null
}

export type favoritosUpdateInput = {
  idUsuario?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
  fechaAgregado?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type favoritosUncheckedUpdateInput = {
  idUsuario?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
  fechaAgregado?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type favoritosCreateManyInput = {
  idUsuario: number
  idCuento: number
  fechaAgregado?: Date | string | null
}

export type favoritosUpdateManyMutationInput = {
  idUsuario?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
  fechaAgregado?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type favoritosUncheckedUpdateManyInput = {
  idUsuario?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
  fechaAgregado?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type favoritosIdUsuarioIdCuentoCompoundUniqueInput = {
  idUsuario: number
  idCuento: number
}

export type favoritosCountOrderByAggregateInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  fechaAgregado?: Prisma.SortOrder
}

export type favoritosAvgOrderByAggregateInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type favoritosMaxOrderByAggregateInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  fechaAgregado?: Prisma.SortOrder
}

export type favoritosMinOrderByAggregateInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  fechaAgregado?: Prisma.SortOrder
}

export type favoritosSumOrderByAggregateInput = {
  idUsuario?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}



export type favoritosSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  idUsuario?: boolean
  idCuento?: boolean
  fechaAgregado?: boolean
}, ExtArgs["result"]["favoritos"]>



export type favoritosSelectScalar = {
  idUsuario?: boolean
  idCuento?: boolean
  fechaAgregado?: boolean
}

export type favoritosOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"idUsuario" | "idCuento" | "fechaAgregado", ExtArgs["result"]["favoritos"]>

export type $favoritosPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "favoritos"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    idUsuario: number
    idCuento: number
    fechaAgregado: Date | null
  }, ExtArgs["result"]["favoritos"]>
  composites: {}
}

export type favoritosGetPayload<S extends boolean | null | undefined | favoritosDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$favoritosPayload, S>

export type favoritosCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<favoritosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FavoritosCountAggregateInputType | true
  }

export interface favoritosDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['favoritos'], meta: { name: 'favoritos' } }
  /**
   * Find zero or one Favoritos that matches the filter.
   * @param {favoritosFindUniqueArgs} args - Arguments to find a Favoritos
   * @example
   * // Get one Favoritos
   * const favoritos = await prisma.favoritos.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends favoritosFindUniqueArgs>(args: Prisma.SelectSubset<T, favoritosFindUniqueArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Favoritos that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {favoritosFindUniqueOrThrowArgs} args - Arguments to find a Favoritos
   * @example
   * // Get one Favoritos
   * const favoritos = await prisma.favoritos.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends favoritosFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, favoritosFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Favoritos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosFindFirstArgs} args - Arguments to find a Favoritos
   * @example
   * // Get one Favoritos
   * const favoritos = await prisma.favoritos.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends favoritosFindFirstArgs>(args?: Prisma.SelectSubset<T, favoritosFindFirstArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Favoritos that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosFindFirstOrThrowArgs} args - Arguments to find a Favoritos
   * @example
   * // Get one Favoritos
   * const favoritos = await prisma.favoritos.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends favoritosFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, favoritosFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Favoritos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Favoritos
   * const favoritos = await prisma.favoritos.findMany()
   * 
   * // Get first 10 Favoritos
   * const favoritos = await prisma.favoritos.findMany({ take: 10 })
   * 
   * // Only select the `idUsuario`
   * const favoritosWithIdUsuarioOnly = await prisma.favoritos.findMany({ select: { idUsuario: true } })
   * 
   */
  findMany<T extends favoritosFindManyArgs>(args?: Prisma.SelectSubset<T, favoritosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Favoritos.
   * @param {favoritosCreateArgs} args - Arguments to create a Favoritos.
   * @example
   * // Create one Favoritos
   * const Favoritos = await prisma.favoritos.create({
   *   data: {
   *     // ... data to create a Favoritos
   *   }
   * })
   * 
   */
  create<T extends favoritosCreateArgs>(args: Prisma.SelectSubset<T, favoritosCreateArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Favoritos.
   * @param {favoritosCreateManyArgs} args - Arguments to create many Favoritos.
   * @example
   * // Create many Favoritos
   * const favoritos = await prisma.favoritos.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends favoritosCreateManyArgs>(args?: Prisma.SelectSubset<T, favoritosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Favoritos.
   * @param {favoritosDeleteArgs} args - Arguments to delete one Favoritos.
   * @example
   * // Delete one Favoritos
   * const Favoritos = await prisma.favoritos.delete({
   *   where: {
   *     // ... filter to delete one Favoritos
   *   }
   * })
   * 
   */
  delete<T extends favoritosDeleteArgs>(args: Prisma.SelectSubset<T, favoritosDeleteArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Favoritos.
   * @param {favoritosUpdateArgs} args - Arguments to update one Favoritos.
   * @example
   * // Update one Favoritos
   * const favoritos = await prisma.favoritos.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends favoritosUpdateArgs>(args: Prisma.SelectSubset<T, favoritosUpdateArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Favoritos.
   * @param {favoritosDeleteManyArgs} args - Arguments to filter Favoritos to delete.
   * @example
   * // Delete a few Favoritos
   * const { count } = await prisma.favoritos.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends favoritosDeleteManyArgs>(args?: Prisma.SelectSubset<T, favoritosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Favoritos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Favoritos
   * const favoritos = await prisma.favoritos.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends favoritosUpdateManyArgs>(args: Prisma.SelectSubset<T, favoritosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Favoritos.
   * @param {favoritosUpsertArgs} args - Arguments to update or create a Favoritos.
   * @example
   * // Update or create a Favoritos
   * const favoritos = await prisma.favoritos.upsert({
   *   create: {
   *     // ... data to create a Favoritos
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Favoritos we want to update
   *   }
   * })
   */
  upsert<T extends favoritosUpsertArgs>(args: Prisma.SelectSubset<T, favoritosUpsertArgs<ExtArgs>>): Prisma.Prisma__favoritosClient<runtime.Types.Result.GetResult<Prisma.$favoritosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Favoritos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosCountArgs} args - Arguments to filter Favoritos to count.
   * @example
   * // Count the number of Favoritos
   * const count = await prisma.favoritos.count({
   *   where: {
   *     // ... the filter for the Favoritos we want to count
   *   }
   * })
  **/
  count<T extends favoritosCountArgs>(
    args?: Prisma.Subset<T, favoritosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FavoritosCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Favoritos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FavoritosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FavoritosAggregateArgs>(args: Prisma.Subset<T, FavoritosAggregateArgs>): Prisma.PrismaPromise<GetFavoritosAggregateType<T>>

  /**
   * Group by Favoritos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {favoritosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends favoritosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: favoritosGroupByArgs['orderBy'] }
      : { orderBy?: favoritosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, favoritosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the favoritos model
 */
readonly fields: favoritosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for favoritos.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__favoritosClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the favoritos model
 */
export interface favoritosFieldRefs {
  readonly idUsuario: Prisma.FieldRef<"favoritos", 'Int'>
  readonly idCuento: Prisma.FieldRef<"favoritos", 'Int'>
  readonly fechaAgregado: Prisma.FieldRef<"favoritos", 'DateTime'>
}
    

// Custom InputTypes
/**
 * favoritos findUnique
 */
export type favoritosFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter, which favoritos to fetch.
   */
  where: Prisma.favoritosWhereUniqueInput
}

/**
 * favoritos findUniqueOrThrow
 */
export type favoritosFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter, which favoritos to fetch.
   */
  where: Prisma.favoritosWhereUniqueInput
}

/**
 * favoritos findFirst
 */
export type favoritosFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter, which favoritos to fetch.
   */
  where?: Prisma.favoritosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of favoritos to fetch.
   */
  orderBy?: Prisma.favoritosOrderByWithRelationInput | Prisma.favoritosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for favoritos.
   */
  cursor?: Prisma.favoritosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` favoritos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` favoritos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of favoritos.
   */
  distinct?: Prisma.FavoritosScalarFieldEnum | Prisma.FavoritosScalarFieldEnum[]
}

/**
 * favoritos findFirstOrThrow
 */
export type favoritosFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter, which favoritos to fetch.
   */
  where?: Prisma.favoritosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of favoritos to fetch.
   */
  orderBy?: Prisma.favoritosOrderByWithRelationInput | Prisma.favoritosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for favoritos.
   */
  cursor?: Prisma.favoritosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` favoritos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` favoritos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of favoritos.
   */
  distinct?: Prisma.FavoritosScalarFieldEnum | Prisma.FavoritosScalarFieldEnum[]
}

/**
 * favoritos findMany
 */
export type favoritosFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter, which favoritos to fetch.
   */
  where?: Prisma.favoritosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of favoritos to fetch.
   */
  orderBy?: Prisma.favoritosOrderByWithRelationInput | Prisma.favoritosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing favoritos.
   */
  cursor?: Prisma.favoritosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` favoritos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` favoritos.
   */
  skip?: number
  distinct?: Prisma.FavoritosScalarFieldEnum | Prisma.FavoritosScalarFieldEnum[]
}

/**
 * favoritos create
 */
export type favoritosCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * The data needed to create a favoritos.
   */
  data: Prisma.XOR<Prisma.favoritosCreateInput, Prisma.favoritosUncheckedCreateInput>
}

/**
 * favoritos createMany
 */
export type favoritosCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many favoritos.
   */
  data: Prisma.favoritosCreateManyInput | Prisma.favoritosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * favoritos update
 */
export type favoritosUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * The data needed to update a favoritos.
   */
  data: Prisma.XOR<Prisma.favoritosUpdateInput, Prisma.favoritosUncheckedUpdateInput>
  /**
   * Choose, which favoritos to update.
   */
  where: Prisma.favoritosWhereUniqueInput
}

/**
 * favoritos updateMany
 */
export type favoritosUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update favoritos.
   */
  data: Prisma.XOR<Prisma.favoritosUpdateManyMutationInput, Prisma.favoritosUncheckedUpdateManyInput>
  /**
   * Filter which favoritos to update
   */
  where?: Prisma.favoritosWhereInput
  /**
   * Limit how many favoritos to update.
   */
  limit?: number
}

/**
 * favoritos upsert
 */
export type favoritosUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * The filter to search for the favoritos to update in case it exists.
   */
  where: Prisma.favoritosWhereUniqueInput
  /**
   * In case the favoritos found by the `where` argument doesn't exist, create a new favoritos with this data.
   */
  create: Prisma.XOR<Prisma.favoritosCreateInput, Prisma.favoritosUncheckedCreateInput>
  /**
   * In case the favoritos was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.favoritosUpdateInput, Prisma.favoritosUncheckedUpdateInput>
}

/**
 * favoritos delete
 */
export type favoritosDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
  /**
   * Filter which favoritos to delete.
   */
  where: Prisma.favoritosWhereUniqueInput
}

/**
 * favoritos deleteMany
 */
export type favoritosDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which favoritos to delete
   */
  where?: Prisma.favoritosWhereInput
  /**
   * Limit how many favoritos to delete.
   */
  limit?: number
}

/**
 * favoritos without action
 */
export type favoritosDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the favoritos
   */
  select?: Prisma.favoritosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the favoritos
   */
  omit?: Prisma.favoritosOmit<ExtArgs> | null
}
