
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `avatars` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model avatars
 * 
 */
export type avatarsModel = runtime.Types.Result.DefaultSelection<Prisma.$avatarsPayload>

export type AggregateAvatars = {
  _count: AvatarsCountAggregateOutputType | null
  _avg: AvatarsAvgAggregateOutputType | null
  _sum: AvatarsSumAggregateOutputType | null
  _min: AvatarsMinAggregateOutputType | null
  _max: AvatarsMaxAggregateOutputType | null
}

export type AvatarsAvgAggregateOutputType = {
  idAvatar: number | null
}

export type AvatarsSumAggregateOutputType = {
  idAvatar: number | null
}

export type AvatarsMinAggregateOutputType = {
  idAvatar: number | null
  nombreAvatar: string | null
  urlAvatar: string | null
}

export type AvatarsMaxAggregateOutputType = {
  idAvatar: number | null
  nombreAvatar: string | null
  urlAvatar: string | null
}

export type AvatarsCountAggregateOutputType = {
  idAvatar: number
  nombreAvatar: number
  urlAvatar: number
  _all: number
}


export type AvatarsAvgAggregateInputType = {
  idAvatar?: true
}

export type AvatarsSumAggregateInputType = {
  idAvatar?: true
}

export type AvatarsMinAggregateInputType = {
  idAvatar?: true
  nombreAvatar?: true
  urlAvatar?: true
}

export type AvatarsMaxAggregateInputType = {
  idAvatar?: true
  nombreAvatar?: true
  urlAvatar?: true
}

export type AvatarsCountAggregateInputType = {
  idAvatar?: true
  nombreAvatar?: true
  urlAvatar?: true
  _all?: true
}

export type AvatarsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which avatars to aggregate.
   */
  where?: Prisma.avatarsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of avatars to fetch.
   */
  orderBy?: Prisma.avatarsOrderByWithRelationInput | Prisma.avatarsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.avatarsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` avatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` avatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned avatars
  **/
  _count?: true | AvatarsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AvatarsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AvatarsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AvatarsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AvatarsMaxAggregateInputType
}

export type GetAvatarsAggregateType<T extends AvatarsAggregateArgs> = {
      [P in keyof T & keyof AggregateAvatars]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAvatars[P]>
    : Prisma.GetScalarType<T[P], AggregateAvatars[P]>
}




export type avatarsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.avatarsWhereInput
  orderBy?: Prisma.avatarsOrderByWithAggregationInput | Prisma.avatarsOrderByWithAggregationInput[]
  by: Prisma.AvatarsScalarFieldEnum[] | Prisma.AvatarsScalarFieldEnum
  having?: Prisma.avatarsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AvatarsCountAggregateInputType | true
  _avg?: AvatarsAvgAggregateInputType
  _sum?: AvatarsSumAggregateInputType
  _min?: AvatarsMinAggregateInputType
  _max?: AvatarsMaxAggregateInputType
}

export type AvatarsGroupByOutputType = {
  idAvatar: number
  nombreAvatar: string
  urlAvatar: string
  _count: AvatarsCountAggregateOutputType | null
  _avg: AvatarsAvgAggregateOutputType | null
  _sum: AvatarsSumAggregateOutputType | null
  _min: AvatarsMinAggregateOutputType | null
  _max: AvatarsMaxAggregateOutputType | null
}

type GetAvatarsGroupByPayload<T extends avatarsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AvatarsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AvatarsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AvatarsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AvatarsGroupByOutputType[P]>
      }
    >
  >



export type avatarsWhereInput = {
  AND?: Prisma.avatarsWhereInput | Prisma.avatarsWhereInput[]
  OR?: Prisma.avatarsWhereInput[]
  NOT?: Prisma.avatarsWhereInput | Prisma.avatarsWhereInput[]
  idAvatar?: Prisma.IntFilter<"avatars"> | number
  nombreAvatar?: Prisma.StringFilter<"avatars"> | string
  urlAvatar?: Prisma.StringFilter<"avatars"> | string
}

export type avatarsOrderByWithRelationInput = {
  idAvatar?: Prisma.SortOrder
  nombreAvatar?: Prisma.SortOrder
  urlAvatar?: Prisma.SortOrder
  _relevance?: Prisma.avatarsOrderByRelevanceInput
}

export type avatarsWhereUniqueInput = Prisma.AtLeast<{
  idAvatar?: number
  urlAvatar?: string
  AND?: Prisma.avatarsWhereInput | Prisma.avatarsWhereInput[]
  OR?: Prisma.avatarsWhereInput[]
  NOT?: Prisma.avatarsWhereInput | Prisma.avatarsWhereInput[]
  nombreAvatar?: Prisma.StringFilter<"avatars"> | string
}, "idAvatar" | "urlAvatar">

export type avatarsOrderByWithAggregationInput = {
  idAvatar?: Prisma.SortOrder
  nombreAvatar?: Prisma.SortOrder
  urlAvatar?: Prisma.SortOrder
  _count?: Prisma.avatarsCountOrderByAggregateInput
  _avg?: Prisma.avatarsAvgOrderByAggregateInput
  _max?: Prisma.avatarsMaxOrderByAggregateInput
  _min?: Prisma.avatarsMinOrderByAggregateInput
  _sum?: Prisma.avatarsSumOrderByAggregateInput
}

export type avatarsScalarWhereWithAggregatesInput = {
  AND?: Prisma.avatarsScalarWhereWithAggregatesInput | Prisma.avatarsScalarWhereWithAggregatesInput[]
  OR?: Prisma.avatarsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.avatarsScalarWhereWithAggregatesInput | Prisma.avatarsScalarWhereWithAggregatesInput[]
  idAvatar?: Prisma.IntWithAggregatesFilter<"avatars"> | number
  nombreAvatar?: Prisma.StringWithAggregatesFilter<"avatars"> | string
  urlAvatar?: Prisma.StringWithAggregatesFilter<"avatars"> | string
}

export type avatarsCreateInput = {
  nombreAvatar: string
  urlAvatar: string
}

export type avatarsUncheckedCreateInput = {
  idAvatar?: number
  nombreAvatar: string
  urlAvatar: string
}

export type avatarsUpdateInput = {
  nombreAvatar?: Prisma.StringFieldUpdateOperationsInput | string
  urlAvatar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type avatarsUncheckedUpdateInput = {
  idAvatar?: Prisma.IntFieldUpdateOperationsInput | number
  nombreAvatar?: Prisma.StringFieldUpdateOperationsInput | string
  urlAvatar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type avatarsCreateManyInput = {
  idAvatar?: number
  nombreAvatar: string
  urlAvatar: string
}

export type avatarsUpdateManyMutationInput = {
  nombreAvatar?: Prisma.StringFieldUpdateOperationsInput | string
  urlAvatar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type avatarsUncheckedUpdateManyInput = {
  idAvatar?: Prisma.IntFieldUpdateOperationsInput | number
  nombreAvatar?: Prisma.StringFieldUpdateOperationsInput | string
  urlAvatar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type avatarsOrderByRelevanceInput = {
  fields: Prisma.avatarsOrderByRelevanceFieldEnum | Prisma.avatarsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type avatarsCountOrderByAggregateInput = {
  idAvatar?: Prisma.SortOrder
  nombreAvatar?: Prisma.SortOrder
  urlAvatar?: Prisma.SortOrder
}

export type avatarsAvgOrderByAggregateInput = {
  idAvatar?: Prisma.SortOrder
}

export type avatarsMaxOrderByAggregateInput = {
  idAvatar?: Prisma.SortOrder
  nombreAvatar?: Prisma.SortOrder
  urlAvatar?: Prisma.SortOrder
}

export type avatarsMinOrderByAggregateInput = {
  idAvatar?: Prisma.SortOrder
  nombreAvatar?: Prisma.SortOrder
  urlAvatar?: Prisma.SortOrder
}

export type avatarsSumOrderByAggregateInput = {
  idAvatar?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type avatarsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  idAvatar?: boolean
  nombreAvatar?: boolean
  urlAvatar?: boolean
}, ExtArgs["result"]["avatars"]>



export type avatarsSelectScalar = {
  idAvatar?: boolean
  nombreAvatar?: boolean
  urlAvatar?: boolean
}

export type avatarsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"idAvatar" | "nombreAvatar" | "urlAvatar", ExtArgs["result"]["avatars"]>

export type $avatarsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "avatars"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    idAvatar: number
    nombreAvatar: string
    urlAvatar: string
  }, ExtArgs["result"]["avatars"]>
  composites: {}
}

export type avatarsGetPayload<S extends boolean | null | undefined | avatarsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$avatarsPayload, S>

export type avatarsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<avatarsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AvatarsCountAggregateInputType | true
  }

export interface avatarsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['avatars'], meta: { name: 'avatars' } }
  /**
   * Find zero or one Avatars that matches the filter.
   * @param {avatarsFindUniqueArgs} args - Arguments to find a Avatars
   * @example
   * // Get one Avatars
   * const avatars = await prisma.avatars.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends avatarsFindUniqueArgs>(args: Prisma.SelectSubset<T, avatarsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Avatars that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {avatarsFindUniqueOrThrowArgs} args - Arguments to find a Avatars
   * @example
   * // Get one Avatars
   * const avatars = await prisma.avatars.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends avatarsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, avatarsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Avatars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsFindFirstArgs} args - Arguments to find a Avatars
   * @example
   * // Get one Avatars
   * const avatars = await prisma.avatars.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends avatarsFindFirstArgs>(args?: Prisma.SelectSubset<T, avatarsFindFirstArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Avatars that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsFindFirstOrThrowArgs} args - Arguments to find a Avatars
   * @example
   * // Get one Avatars
   * const avatars = await prisma.avatars.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends avatarsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, avatarsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Avatars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Avatars
   * const avatars = await prisma.avatars.findMany()
   * 
   * // Get first 10 Avatars
   * const avatars = await prisma.avatars.findMany({ take: 10 })
   * 
   * // Only select the `idAvatar`
   * const avatarsWithIdAvatarOnly = await prisma.avatars.findMany({ select: { idAvatar: true } })
   * 
   */
  findMany<T extends avatarsFindManyArgs>(args?: Prisma.SelectSubset<T, avatarsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Avatars.
   * @param {avatarsCreateArgs} args - Arguments to create a Avatars.
   * @example
   * // Create one Avatars
   * const Avatars = await prisma.avatars.create({
   *   data: {
   *     // ... data to create a Avatars
   *   }
   * })
   * 
   */
  create<T extends avatarsCreateArgs>(args: Prisma.SelectSubset<T, avatarsCreateArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Avatars.
   * @param {avatarsCreateManyArgs} args - Arguments to create many Avatars.
   * @example
   * // Create many Avatars
   * const avatars = await prisma.avatars.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends avatarsCreateManyArgs>(args?: Prisma.SelectSubset<T, avatarsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Avatars.
   * @param {avatarsDeleteArgs} args - Arguments to delete one Avatars.
   * @example
   * // Delete one Avatars
   * const Avatars = await prisma.avatars.delete({
   *   where: {
   *     // ... filter to delete one Avatars
   *   }
   * })
   * 
   */
  delete<T extends avatarsDeleteArgs>(args: Prisma.SelectSubset<T, avatarsDeleteArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Avatars.
   * @param {avatarsUpdateArgs} args - Arguments to update one Avatars.
   * @example
   * // Update one Avatars
   * const avatars = await prisma.avatars.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends avatarsUpdateArgs>(args: Prisma.SelectSubset<T, avatarsUpdateArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Avatars.
   * @param {avatarsDeleteManyArgs} args - Arguments to filter Avatars to delete.
   * @example
   * // Delete a few Avatars
   * const { count } = await prisma.avatars.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends avatarsDeleteManyArgs>(args?: Prisma.SelectSubset<T, avatarsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Avatars
   * const avatars = await prisma.avatars.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends avatarsUpdateManyArgs>(args: Prisma.SelectSubset<T, avatarsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Avatars.
   * @param {avatarsUpsertArgs} args - Arguments to update or create a Avatars.
   * @example
   * // Update or create a Avatars
   * const avatars = await prisma.avatars.upsert({
   *   create: {
   *     // ... data to create a Avatars
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Avatars we want to update
   *   }
   * })
   */
  upsert<T extends avatarsUpsertArgs>(args: Prisma.SelectSubset<T, avatarsUpsertArgs<ExtArgs>>): Prisma.Prisma__avatarsClient<runtime.Types.Result.GetResult<Prisma.$avatarsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsCountArgs} args - Arguments to filter Avatars to count.
   * @example
   * // Count the number of Avatars
   * const count = await prisma.avatars.count({
   *   where: {
   *     // ... the filter for the Avatars we want to count
   *   }
   * })
  **/
  count<T extends avatarsCountArgs>(
    args?: Prisma.Subset<T, avatarsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AvatarsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AvatarsAggregateArgs>(args: Prisma.Subset<T, AvatarsAggregateArgs>): Prisma.PrismaPromise<GetAvatarsAggregateType<T>>

  /**
   * Group by Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {avatarsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends avatarsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: avatarsGroupByArgs['orderBy'] }
      : { orderBy?: avatarsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, avatarsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the avatars model
 */
readonly fields: avatarsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for avatars.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__avatarsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the avatars model
 */
export interface avatarsFieldRefs {
  readonly idAvatar: Prisma.FieldRef<"avatars", 'Int'>
  readonly nombreAvatar: Prisma.FieldRef<"avatars", 'String'>
  readonly urlAvatar: Prisma.FieldRef<"avatars", 'String'>
}
    

// Custom InputTypes
/**
 * avatars findUnique
 */
export type avatarsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter, which avatars to fetch.
   */
  where: Prisma.avatarsWhereUniqueInput
}

/**
 * avatars findUniqueOrThrow
 */
export type avatarsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter, which avatars to fetch.
   */
  where: Prisma.avatarsWhereUniqueInput
}

/**
 * avatars findFirst
 */
export type avatarsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter, which avatars to fetch.
   */
  where?: Prisma.avatarsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of avatars to fetch.
   */
  orderBy?: Prisma.avatarsOrderByWithRelationInput | Prisma.avatarsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for avatars.
   */
  cursor?: Prisma.avatarsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` avatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` avatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of avatars.
   */
  distinct?: Prisma.AvatarsScalarFieldEnum | Prisma.AvatarsScalarFieldEnum[]
}

/**
 * avatars findFirstOrThrow
 */
export type avatarsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter, which avatars to fetch.
   */
  where?: Prisma.avatarsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of avatars to fetch.
   */
  orderBy?: Prisma.avatarsOrderByWithRelationInput | Prisma.avatarsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for avatars.
   */
  cursor?: Prisma.avatarsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` avatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` avatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of avatars.
   */
  distinct?: Prisma.AvatarsScalarFieldEnum | Prisma.AvatarsScalarFieldEnum[]
}

/**
 * avatars findMany
 */
export type avatarsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter, which avatars to fetch.
   */
  where?: Prisma.avatarsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of avatars to fetch.
   */
  orderBy?: Prisma.avatarsOrderByWithRelationInput | Prisma.avatarsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing avatars.
   */
  cursor?: Prisma.avatarsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` avatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` avatars.
   */
  skip?: number
  distinct?: Prisma.AvatarsScalarFieldEnum | Prisma.AvatarsScalarFieldEnum[]
}

/**
 * avatars create
 */
export type avatarsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * The data needed to create a avatars.
   */
  data: Prisma.XOR<Prisma.avatarsCreateInput, Prisma.avatarsUncheckedCreateInput>
}

/**
 * avatars createMany
 */
export type avatarsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many avatars.
   */
  data: Prisma.avatarsCreateManyInput | Prisma.avatarsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * avatars update
 */
export type avatarsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * The data needed to update a avatars.
   */
  data: Prisma.XOR<Prisma.avatarsUpdateInput, Prisma.avatarsUncheckedUpdateInput>
  /**
   * Choose, which avatars to update.
   */
  where: Prisma.avatarsWhereUniqueInput
}

/**
 * avatars updateMany
 */
export type avatarsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update avatars.
   */
  data: Prisma.XOR<Prisma.avatarsUpdateManyMutationInput, Prisma.avatarsUncheckedUpdateManyInput>
  /**
   * Filter which avatars to update
   */
  where?: Prisma.avatarsWhereInput
  /**
   * Limit how many avatars to update.
   */
  limit?: number
}

/**
 * avatars upsert
 */
export type avatarsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * The filter to search for the avatars to update in case it exists.
   */
  where: Prisma.avatarsWhereUniqueInput
  /**
   * In case the avatars found by the `where` argument doesn't exist, create a new avatars with this data.
   */
  create: Prisma.XOR<Prisma.avatarsCreateInput, Prisma.avatarsUncheckedCreateInput>
  /**
   * In case the avatars was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.avatarsUpdateInput, Prisma.avatarsUncheckedUpdateInput>
}

/**
 * avatars delete
 */
export type avatarsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
  /**
   * Filter which avatars to delete.
   */
  where: Prisma.avatarsWhereUniqueInput
}

/**
 * avatars deleteMany
 */
export type avatarsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which avatars to delete
   */
  where?: Prisma.avatarsWhereInput
  /**
   * Limit how many avatars to delete.
   */
  limit?: number
}

/**
 * avatars without action
 */
export type avatarsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the avatars
   */
  select?: Prisma.avatarsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the avatars
   */
  omit?: Prisma.avatarsOmit<ExtArgs> | null
}
