
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `cuentocategoria` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model cuentocategoria
 * 
 */
export type cuentocategoriaModel = runtime.Types.Result.DefaultSelection<Prisma.$cuentocategoriaPayload>

export type AggregateCuentocategoria = {
  _count: CuentocategoriaCountAggregateOutputType | null
  _avg: CuentocategoriaAvgAggregateOutputType | null
  _sum: CuentocategoriaSumAggregateOutputType | null
  _min: CuentocategoriaMinAggregateOutputType | null
  _max: CuentocategoriaMaxAggregateOutputType | null
}

export type CuentocategoriaAvgAggregateOutputType = {
  idCategoria: number | null
  idCuento: number | null
}

export type CuentocategoriaSumAggregateOutputType = {
  idCategoria: number | null
  idCuento: number | null
}

export type CuentocategoriaMinAggregateOutputType = {
  idCategoria: number | null
  idCuento: number | null
}

export type CuentocategoriaMaxAggregateOutputType = {
  idCategoria: number | null
  idCuento: number | null
}

export type CuentocategoriaCountAggregateOutputType = {
  idCategoria: number
  idCuento: number
  _all: number
}


export type CuentocategoriaAvgAggregateInputType = {
  idCategoria?: true
  idCuento?: true
}

export type CuentocategoriaSumAggregateInputType = {
  idCategoria?: true
  idCuento?: true
}

export type CuentocategoriaMinAggregateInputType = {
  idCategoria?: true
  idCuento?: true
}

export type CuentocategoriaMaxAggregateInputType = {
  idCategoria?: true
  idCuento?: true
}

export type CuentocategoriaCountAggregateInputType = {
  idCategoria?: true
  idCuento?: true
  _all?: true
}

export type CuentocategoriaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which cuentocategoria to aggregate.
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cuentocategorias to fetch.
   */
  orderBy?: Prisma.cuentocategoriaOrderByWithRelationInput | Prisma.cuentocategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.cuentocategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cuentocategorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cuentocategorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned cuentocategorias
  **/
  _count?: true | CuentocategoriaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CuentocategoriaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CuentocategoriaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CuentocategoriaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CuentocategoriaMaxAggregateInputType
}

export type GetCuentocategoriaAggregateType<T extends CuentocategoriaAggregateArgs> = {
      [P in keyof T & keyof AggregateCuentocategoria]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCuentocategoria[P]>
    : Prisma.GetScalarType<T[P], AggregateCuentocategoria[P]>
}




export type cuentocategoriaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.cuentocategoriaWhereInput
  orderBy?: Prisma.cuentocategoriaOrderByWithAggregationInput | Prisma.cuentocategoriaOrderByWithAggregationInput[]
  by: Prisma.CuentocategoriaScalarFieldEnum[] | Prisma.CuentocategoriaScalarFieldEnum
  having?: Prisma.cuentocategoriaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CuentocategoriaCountAggregateInputType | true
  _avg?: CuentocategoriaAvgAggregateInputType
  _sum?: CuentocategoriaSumAggregateInputType
  _min?: CuentocategoriaMinAggregateInputType
  _max?: CuentocategoriaMaxAggregateInputType
}

export type CuentocategoriaGroupByOutputType = {
  idCategoria: number
  idCuento: number
  _count: CuentocategoriaCountAggregateOutputType | null
  _avg: CuentocategoriaAvgAggregateOutputType | null
  _sum: CuentocategoriaSumAggregateOutputType | null
  _min: CuentocategoriaMinAggregateOutputType | null
  _max: CuentocategoriaMaxAggregateOutputType | null
}

type GetCuentocategoriaGroupByPayload<T extends cuentocategoriaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CuentocategoriaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CuentocategoriaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CuentocategoriaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CuentocategoriaGroupByOutputType[P]>
      }
    >
  >



export type cuentocategoriaWhereInput = {
  AND?: Prisma.cuentocategoriaWhereInput | Prisma.cuentocategoriaWhereInput[]
  OR?: Prisma.cuentocategoriaWhereInput[]
  NOT?: Prisma.cuentocategoriaWhereInput | Prisma.cuentocategoriaWhereInput[]
  idCategoria?: Prisma.IntFilter<"cuentocategoria"> | number
  idCuento?: Prisma.IntFilter<"cuentocategoria"> | number
}

export type cuentocategoriaOrderByWithRelationInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type cuentocategoriaWhereUniqueInput = Prisma.AtLeast<{
  idCategoria_idCuento?: Prisma.cuentocategoriaIdCategoriaIdCuentoCompoundUniqueInput
  AND?: Prisma.cuentocategoriaWhereInput | Prisma.cuentocategoriaWhereInput[]
  OR?: Prisma.cuentocategoriaWhereInput[]
  NOT?: Prisma.cuentocategoriaWhereInput | Prisma.cuentocategoriaWhereInput[]
  idCategoria?: Prisma.IntFilter<"cuentocategoria"> | number
  idCuento?: Prisma.IntFilter<"cuentocategoria"> | number
}, "idCategoria_idCuento">

export type cuentocategoriaOrderByWithAggregationInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
  _count?: Prisma.cuentocategoriaCountOrderByAggregateInput
  _avg?: Prisma.cuentocategoriaAvgOrderByAggregateInput
  _max?: Prisma.cuentocategoriaMaxOrderByAggregateInput
  _min?: Prisma.cuentocategoriaMinOrderByAggregateInput
  _sum?: Prisma.cuentocategoriaSumOrderByAggregateInput
}

export type cuentocategoriaScalarWhereWithAggregatesInput = {
  AND?: Prisma.cuentocategoriaScalarWhereWithAggregatesInput | Prisma.cuentocategoriaScalarWhereWithAggregatesInput[]
  OR?: Prisma.cuentocategoriaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.cuentocategoriaScalarWhereWithAggregatesInput | Prisma.cuentocategoriaScalarWhereWithAggregatesInput[]
  idCategoria?: Prisma.IntWithAggregatesFilter<"cuentocategoria"> | number
  idCuento?: Prisma.IntWithAggregatesFilter<"cuentocategoria"> | number
}

export type cuentocategoriaCreateInput = {
  idCategoria: number
  idCuento: number
}

export type cuentocategoriaUncheckedCreateInput = {
  idCategoria: number
  idCuento: number
}

export type cuentocategoriaUpdateInput = {
  idCategoria?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
}

export type cuentocategoriaUncheckedUpdateInput = {
  idCategoria?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
}

export type cuentocategoriaCreateManyInput = {
  idCategoria: number
  idCuento: number
}

export type cuentocategoriaUpdateManyMutationInput = {
  idCategoria?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
}

export type cuentocategoriaUncheckedUpdateManyInput = {
  idCategoria?: Prisma.IntFieldUpdateOperationsInput | number
  idCuento?: Prisma.IntFieldUpdateOperationsInput | number
}

export type cuentocategoriaIdCategoriaIdCuentoCompoundUniqueInput = {
  idCategoria: number
  idCuento: number
}

export type cuentocategoriaCountOrderByAggregateInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type cuentocategoriaAvgOrderByAggregateInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type cuentocategoriaMaxOrderByAggregateInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type cuentocategoriaMinOrderByAggregateInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}

export type cuentocategoriaSumOrderByAggregateInput = {
  idCategoria?: Prisma.SortOrder
  idCuento?: Prisma.SortOrder
}



export type cuentocategoriaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  idCategoria?: boolean
  idCuento?: boolean
}, ExtArgs["result"]["cuentocategoria"]>



export type cuentocategoriaSelectScalar = {
  idCategoria?: boolean
  idCuento?: boolean
}

export type cuentocategoriaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"idCategoria" | "idCuento", ExtArgs["result"]["cuentocategoria"]>

export type $cuentocategoriaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "cuentocategoria"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    idCategoria: number
    idCuento: number
  }, ExtArgs["result"]["cuentocategoria"]>
  composites: {}
}

export type cuentocategoriaGetPayload<S extends boolean | null | undefined | cuentocategoriaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload, S>

export type cuentocategoriaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<cuentocategoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CuentocategoriaCountAggregateInputType | true
  }

export interface cuentocategoriaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cuentocategoria'], meta: { name: 'cuentocategoria' } }
  /**
   * Find zero or one Cuentocategoria that matches the filter.
   * @param {cuentocategoriaFindUniqueArgs} args - Arguments to find a Cuentocategoria
   * @example
   * // Get one Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends cuentocategoriaFindUniqueArgs>(args: Prisma.SelectSubset<T, cuentocategoriaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Cuentocategoria that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {cuentocategoriaFindUniqueOrThrowArgs} args - Arguments to find a Cuentocategoria
   * @example
   * // Get one Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends cuentocategoriaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, cuentocategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cuentocategoria that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaFindFirstArgs} args - Arguments to find a Cuentocategoria
   * @example
   * // Get one Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends cuentocategoriaFindFirstArgs>(args?: Prisma.SelectSubset<T, cuentocategoriaFindFirstArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cuentocategoria that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaFindFirstOrThrowArgs} args - Arguments to find a Cuentocategoria
   * @example
   * // Get one Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends cuentocategoriaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, cuentocategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cuentocategorias that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cuentocategorias
   * const cuentocategorias = await prisma.cuentocategoria.findMany()
   * 
   * // Get first 10 Cuentocategorias
   * const cuentocategorias = await prisma.cuentocategoria.findMany({ take: 10 })
   * 
   * // Only select the `idCategoria`
   * const cuentocategoriaWithIdCategoriaOnly = await prisma.cuentocategoria.findMany({ select: { idCategoria: true } })
   * 
   */
  findMany<T extends cuentocategoriaFindManyArgs>(args?: Prisma.SelectSubset<T, cuentocategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Cuentocategoria.
   * @param {cuentocategoriaCreateArgs} args - Arguments to create a Cuentocategoria.
   * @example
   * // Create one Cuentocategoria
   * const Cuentocategoria = await prisma.cuentocategoria.create({
   *   data: {
   *     // ... data to create a Cuentocategoria
   *   }
   * })
   * 
   */
  create<T extends cuentocategoriaCreateArgs>(args: Prisma.SelectSubset<T, cuentocategoriaCreateArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cuentocategorias.
   * @param {cuentocategoriaCreateManyArgs} args - Arguments to create many Cuentocategorias.
   * @example
   * // Create many Cuentocategorias
   * const cuentocategoria = await prisma.cuentocategoria.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends cuentocategoriaCreateManyArgs>(args?: Prisma.SelectSubset<T, cuentocategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Cuentocategoria.
   * @param {cuentocategoriaDeleteArgs} args - Arguments to delete one Cuentocategoria.
   * @example
   * // Delete one Cuentocategoria
   * const Cuentocategoria = await prisma.cuentocategoria.delete({
   *   where: {
   *     // ... filter to delete one Cuentocategoria
   *   }
   * })
   * 
   */
  delete<T extends cuentocategoriaDeleteArgs>(args: Prisma.SelectSubset<T, cuentocategoriaDeleteArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Cuentocategoria.
   * @param {cuentocategoriaUpdateArgs} args - Arguments to update one Cuentocategoria.
   * @example
   * // Update one Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends cuentocategoriaUpdateArgs>(args: Prisma.SelectSubset<T, cuentocategoriaUpdateArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cuentocategorias.
   * @param {cuentocategoriaDeleteManyArgs} args - Arguments to filter Cuentocategorias to delete.
   * @example
   * // Delete a few Cuentocategorias
   * const { count } = await prisma.cuentocategoria.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends cuentocategoriaDeleteManyArgs>(args?: Prisma.SelectSubset<T, cuentocategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cuentocategorias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cuentocategorias
   * const cuentocategoria = await prisma.cuentocategoria.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends cuentocategoriaUpdateManyArgs>(args: Prisma.SelectSubset<T, cuentocategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Cuentocategoria.
   * @param {cuentocategoriaUpsertArgs} args - Arguments to update or create a Cuentocategoria.
   * @example
   * // Update or create a Cuentocategoria
   * const cuentocategoria = await prisma.cuentocategoria.upsert({
   *   create: {
   *     // ... data to create a Cuentocategoria
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Cuentocategoria we want to update
   *   }
   * })
   */
  upsert<T extends cuentocategoriaUpsertArgs>(args: Prisma.SelectSubset<T, cuentocategoriaUpsertArgs<ExtArgs>>): Prisma.Prisma__cuentocategoriaClient<runtime.Types.Result.GetResult<Prisma.$cuentocategoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cuentocategorias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaCountArgs} args - Arguments to filter Cuentocategorias to count.
   * @example
   * // Count the number of Cuentocategorias
   * const count = await prisma.cuentocategoria.count({
   *   where: {
   *     // ... the filter for the Cuentocategorias we want to count
   *   }
   * })
  **/
  count<T extends cuentocategoriaCountArgs>(
    args?: Prisma.Subset<T, cuentocategoriaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CuentocategoriaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Cuentocategoria.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CuentocategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CuentocategoriaAggregateArgs>(args: Prisma.Subset<T, CuentocategoriaAggregateArgs>): Prisma.PrismaPromise<GetCuentocategoriaAggregateType<T>>

  /**
   * Group by Cuentocategoria.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cuentocategoriaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends cuentocategoriaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: cuentocategoriaGroupByArgs['orderBy'] }
      : { orderBy?: cuentocategoriaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, cuentocategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuentocategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the cuentocategoria model
 */
readonly fields: cuentocategoriaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for cuentocategoria.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__cuentocategoriaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the cuentocategoria model
 */
export interface cuentocategoriaFieldRefs {
  readonly idCategoria: Prisma.FieldRef<"cuentocategoria", 'Int'>
  readonly idCuento: Prisma.FieldRef<"cuentocategoria", 'Int'>
}
    

// Custom InputTypes
/**
 * cuentocategoria findUnique
 */
export type cuentocategoriaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter, which cuentocategoria to fetch.
   */
  where: Prisma.cuentocategoriaWhereUniqueInput
}

/**
 * cuentocategoria findUniqueOrThrow
 */
export type cuentocategoriaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter, which cuentocategoria to fetch.
   */
  where: Prisma.cuentocategoriaWhereUniqueInput
}

/**
 * cuentocategoria findFirst
 */
export type cuentocategoriaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter, which cuentocategoria to fetch.
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cuentocategorias to fetch.
   */
  orderBy?: Prisma.cuentocategoriaOrderByWithRelationInput | Prisma.cuentocategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for cuentocategorias.
   */
  cursor?: Prisma.cuentocategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cuentocategorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cuentocategorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of cuentocategorias.
   */
  distinct?: Prisma.CuentocategoriaScalarFieldEnum | Prisma.CuentocategoriaScalarFieldEnum[]
}

/**
 * cuentocategoria findFirstOrThrow
 */
export type cuentocategoriaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter, which cuentocategoria to fetch.
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cuentocategorias to fetch.
   */
  orderBy?: Prisma.cuentocategoriaOrderByWithRelationInput | Prisma.cuentocategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for cuentocategorias.
   */
  cursor?: Prisma.cuentocategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cuentocategorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cuentocategorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of cuentocategorias.
   */
  distinct?: Prisma.CuentocategoriaScalarFieldEnum | Prisma.CuentocategoriaScalarFieldEnum[]
}

/**
 * cuentocategoria findMany
 */
export type cuentocategoriaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter, which cuentocategorias to fetch.
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cuentocategorias to fetch.
   */
  orderBy?: Prisma.cuentocategoriaOrderByWithRelationInput | Prisma.cuentocategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing cuentocategorias.
   */
  cursor?: Prisma.cuentocategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cuentocategorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cuentocategorias.
   */
  skip?: number
  distinct?: Prisma.CuentocategoriaScalarFieldEnum | Prisma.CuentocategoriaScalarFieldEnum[]
}

/**
 * cuentocategoria create
 */
export type cuentocategoriaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * The data needed to create a cuentocategoria.
   */
  data: Prisma.XOR<Prisma.cuentocategoriaCreateInput, Prisma.cuentocategoriaUncheckedCreateInput>
}

/**
 * cuentocategoria createMany
 */
export type cuentocategoriaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many cuentocategorias.
   */
  data: Prisma.cuentocategoriaCreateManyInput | Prisma.cuentocategoriaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * cuentocategoria update
 */
export type cuentocategoriaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * The data needed to update a cuentocategoria.
   */
  data: Prisma.XOR<Prisma.cuentocategoriaUpdateInput, Prisma.cuentocategoriaUncheckedUpdateInput>
  /**
   * Choose, which cuentocategoria to update.
   */
  where: Prisma.cuentocategoriaWhereUniqueInput
}

/**
 * cuentocategoria updateMany
 */
export type cuentocategoriaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update cuentocategorias.
   */
  data: Prisma.XOR<Prisma.cuentocategoriaUpdateManyMutationInput, Prisma.cuentocategoriaUncheckedUpdateManyInput>
  /**
   * Filter which cuentocategorias to update
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * Limit how many cuentocategorias to update.
   */
  limit?: number
}

/**
 * cuentocategoria upsert
 */
export type cuentocategoriaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * The filter to search for the cuentocategoria to update in case it exists.
   */
  where: Prisma.cuentocategoriaWhereUniqueInput
  /**
   * In case the cuentocategoria found by the `where` argument doesn't exist, create a new cuentocategoria with this data.
   */
  create: Prisma.XOR<Prisma.cuentocategoriaCreateInput, Prisma.cuentocategoriaUncheckedCreateInput>
  /**
   * In case the cuentocategoria was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.cuentocategoriaUpdateInput, Prisma.cuentocategoriaUncheckedUpdateInput>
}

/**
 * cuentocategoria delete
 */
export type cuentocategoriaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
  /**
   * Filter which cuentocategoria to delete.
   */
  where: Prisma.cuentocategoriaWhereUniqueInput
}

/**
 * cuentocategoria deleteMany
 */
export type cuentocategoriaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which cuentocategorias to delete
   */
  where?: Prisma.cuentocategoriaWhereInput
  /**
   * Limit how many cuentocategorias to delete.
   */
  limit?: number
}

/**
 * cuentocategoria without action
 */
export type cuentocategoriaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cuentocategoria
   */
  select?: Prisma.cuentocategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cuentocategoria
   */
  omit?: Prisma.cuentocategoriaOmit<ExtArgs> | null
}
