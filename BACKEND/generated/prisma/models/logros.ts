
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `logros` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model logros
 * 
 */
export type logrosModel = runtime.Types.Result.DefaultSelection<Prisma.$logrosPayload>

export type AggregateLogros = {
  _count: LogrosCountAggregateOutputType | null
  _avg: LogrosAvgAggregateOutputType | null
  _sum: LogrosSumAggregateOutputType | null
  _min: LogrosMinAggregateOutputType | null
  _max: LogrosMaxAggregateOutputType | null
}

export type LogrosAvgAggregateOutputType = {
  idLogro: number | null
}

export type LogrosSumAggregateOutputType = {
  idLogro: number | null
}

export type LogrosMinAggregateOutputType = {
  idLogro: number | null
  nombreLogro: string | null
  descripcion: string | null
  urlIcono: string | null
}

export type LogrosMaxAggregateOutputType = {
  idLogro: number | null
  nombreLogro: string | null
  descripcion: string | null
  urlIcono: string | null
}

export type LogrosCountAggregateOutputType = {
  idLogro: number
  nombreLogro: number
  descripcion: number
  urlIcono: number
  _all: number
}


export type LogrosAvgAggregateInputType = {
  idLogro?: true
}

export type LogrosSumAggregateInputType = {
  idLogro?: true
}

export type LogrosMinAggregateInputType = {
  idLogro?: true
  nombreLogro?: true
  descripcion?: true
  urlIcono?: true
}

export type LogrosMaxAggregateInputType = {
  idLogro?: true
  nombreLogro?: true
  descripcion?: true
  urlIcono?: true
}

export type LogrosCountAggregateInputType = {
  idLogro?: true
  nombreLogro?: true
  descripcion?: true
  urlIcono?: true
  _all?: true
}

export type LogrosAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which logros to aggregate.
   */
  where?: Prisma.logrosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of logros to fetch.
   */
  orderBy?: Prisma.logrosOrderByWithRelationInput | Prisma.logrosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.logrosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` logros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` logros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned logros
  **/
  _count?: true | LogrosCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LogrosAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LogrosSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LogrosMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LogrosMaxAggregateInputType
}

export type GetLogrosAggregateType<T extends LogrosAggregateArgs> = {
      [P in keyof T & keyof AggregateLogros]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLogros[P]>
    : Prisma.GetScalarType<T[P], AggregateLogros[P]>
}




export type logrosGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.logrosWhereInput
  orderBy?: Prisma.logrosOrderByWithAggregationInput | Prisma.logrosOrderByWithAggregationInput[]
  by: Prisma.LogrosScalarFieldEnum[] | Prisma.LogrosScalarFieldEnum
  having?: Prisma.logrosScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LogrosCountAggregateInputType | true
  _avg?: LogrosAvgAggregateInputType
  _sum?: LogrosSumAggregateInputType
  _min?: LogrosMinAggregateInputType
  _max?: LogrosMaxAggregateInputType
}

export type LogrosGroupByOutputType = {
  idLogro: number
  nombreLogro: string
  descripcion: string | null
  urlIcono: string | null
  _count: LogrosCountAggregateOutputType | null
  _avg: LogrosAvgAggregateOutputType | null
  _sum: LogrosSumAggregateOutputType | null
  _min: LogrosMinAggregateOutputType | null
  _max: LogrosMaxAggregateOutputType | null
}

type GetLogrosGroupByPayload<T extends logrosGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LogrosGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LogrosGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LogrosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LogrosGroupByOutputType[P]>
      }
    >
  >



export type logrosWhereInput = {
  AND?: Prisma.logrosWhereInput | Prisma.logrosWhereInput[]
  OR?: Prisma.logrosWhereInput[]
  NOT?: Prisma.logrosWhereInput | Prisma.logrosWhereInput[]
  idLogro?: Prisma.IntFilter<"logros"> | number
  nombreLogro?: Prisma.StringFilter<"logros"> | string
  descripcion?: Prisma.StringNullableFilter<"logros"> | string | null
  urlIcono?: Prisma.StringNullableFilter<"logros"> | string | null
}

export type logrosOrderByWithRelationInput = {
  idLogro?: Prisma.SortOrder
  nombreLogro?: Prisma.SortOrder
  descripcion?: Prisma.SortOrderInput | Prisma.SortOrder
  urlIcono?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.logrosOrderByRelevanceInput
}

export type logrosWhereUniqueInput = Prisma.AtLeast<{
  idLogro?: number
  AND?: Prisma.logrosWhereInput | Prisma.logrosWhereInput[]
  OR?: Prisma.logrosWhereInput[]
  NOT?: Prisma.logrosWhereInput | Prisma.logrosWhereInput[]
  nombreLogro?: Prisma.StringFilter<"logros"> | string
  descripcion?: Prisma.StringNullableFilter<"logros"> | string | null
  urlIcono?: Prisma.StringNullableFilter<"logros"> | string | null
}, "idLogro">

export type logrosOrderByWithAggregationInput = {
  idLogro?: Prisma.SortOrder
  nombreLogro?: Prisma.SortOrder
  descripcion?: Prisma.SortOrderInput | Prisma.SortOrder
  urlIcono?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.logrosCountOrderByAggregateInput
  _avg?: Prisma.logrosAvgOrderByAggregateInput
  _max?: Prisma.logrosMaxOrderByAggregateInput
  _min?: Prisma.logrosMinOrderByAggregateInput
  _sum?: Prisma.logrosSumOrderByAggregateInput
}

export type logrosScalarWhereWithAggregatesInput = {
  AND?: Prisma.logrosScalarWhereWithAggregatesInput | Prisma.logrosScalarWhereWithAggregatesInput[]
  OR?: Prisma.logrosScalarWhereWithAggregatesInput[]
  NOT?: Prisma.logrosScalarWhereWithAggregatesInput | Prisma.logrosScalarWhereWithAggregatesInput[]
  idLogro?: Prisma.IntWithAggregatesFilter<"logros"> | number
  nombreLogro?: Prisma.StringWithAggregatesFilter<"logros"> | string
  descripcion?: Prisma.StringNullableWithAggregatesFilter<"logros"> | string | null
  urlIcono?: Prisma.StringNullableWithAggregatesFilter<"logros"> | string | null
}

export type logrosCreateInput = {
  nombreLogro: string
  descripcion?: string | null
  urlIcono?: string | null
}

export type logrosUncheckedCreateInput = {
  idLogro?: number
  nombreLogro: string
  descripcion?: string | null
  urlIcono?: string | null
}

export type logrosUpdateInput = {
  nombreLogro?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  urlIcono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type logrosUncheckedUpdateInput = {
  idLogro?: Prisma.IntFieldUpdateOperationsInput | number
  nombreLogro?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  urlIcono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type logrosCreateManyInput = {
  idLogro?: number
  nombreLogro: string
  descripcion?: string | null
  urlIcono?: string | null
}

export type logrosUpdateManyMutationInput = {
  nombreLogro?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  urlIcono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type logrosUncheckedUpdateManyInput = {
  idLogro?: Prisma.IntFieldUpdateOperationsInput | number
  nombreLogro?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  urlIcono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type logrosOrderByRelevanceInput = {
  fields: Prisma.logrosOrderByRelevanceFieldEnum | Prisma.logrosOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type logrosCountOrderByAggregateInput = {
  idLogro?: Prisma.SortOrder
  nombreLogro?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  urlIcono?: Prisma.SortOrder
}

export type logrosAvgOrderByAggregateInput = {
  idLogro?: Prisma.SortOrder
}

export type logrosMaxOrderByAggregateInput = {
  idLogro?: Prisma.SortOrder
  nombreLogro?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  urlIcono?: Prisma.SortOrder
}

export type logrosMinOrderByAggregateInput = {
  idLogro?: Prisma.SortOrder
  nombreLogro?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  urlIcono?: Prisma.SortOrder
}

export type logrosSumOrderByAggregateInput = {
  idLogro?: Prisma.SortOrder
}



export type logrosSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  idLogro?: boolean
  nombreLogro?: boolean
  descripcion?: boolean
  urlIcono?: boolean
}, ExtArgs["result"]["logros"]>



export type logrosSelectScalar = {
  idLogro?: boolean
  nombreLogro?: boolean
  descripcion?: boolean
  urlIcono?: boolean
}

export type logrosOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"idLogro" | "nombreLogro" | "descripcion" | "urlIcono", ExtArgs["result"]["logros"]>

export type $logrosPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "logros"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    idLogro: number
    nombreLogro: string
    descripcion: string | null
    urlIcono: string | null
  }, ExtArgs["result"]["logros"]>
  composites: {}
}

export type logrosGetPayload<S extends boolean | null | undefined | logrosDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$logrosPayload, S>

export type logrosCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<logrosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LogrosCountAggregateInputType | true
  }

export interface logrosDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['logros'], meta: { name: 'logros' } }
  /**
   * Find zero or one Logros that matches the filter.
   * @param {logrosFindUniqueArgs} args - Arguments to find a Logros
   * @example
   * // Get one Logros
   * const logros = await prisma.logros.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends logrosFindUniqueArgs>(args: Prisma.SelectSubset<T, logrosFindUniqueArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Logros that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {logrosFindUniqueOrThrowArgs} args - Arguments to find a Logros
   * @example
   * // Get one Logros
   * const logros = await prisma.logros.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends logrosFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, logrosFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Logros that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosFindFirstArgs} args - Arguments to find a Logros
   * @example
   * // Get one Logros
   * const logros = await prisma.logros.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends logrosFindFirstArgs>(args?: Prisma.SelectSubset<T, logrosFindFirstArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Logros that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosFindFirstOrThrowArgs} args - Arguments to find a Logros
   * @example
   * // Get one Logros
   * const logros = await prisma.logros.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends logrosFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, logrosFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Logros that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Logros
   * const logros = await prisma.logros.findMany()
   * 
   * // Get first 10 Logros
   * const logros = await prisma.logros.findMany({ take: 10 })
   * 
   * // Only select the `idLogro`
   * const logrosWithIdLogroOnly = await prisma.logros.findMany({ select: { idLogro: true } })
   * 
   */
  findMany<T extends logrosFindManyArgs>(args?: Prisma.SelectSubset<T, logrosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Logros.
   * @param {logrosCreateArgs} args - Arguments to create a Logros.
   * @example
   * // Create one Logros
   * const Logros = await prisma.logros.create({
   *   data: {
   *     // ... data to create a Logros
   *   }
   * })
   * 
   */
  create<T extends logrosCreateArgs>(args: Prisma.SelectSubset<T, logrosCreateArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Logros.
   * @param {logrosCreateManyArgs} args - Arguments to create many Logros.
   * @example
   * // Create many Logros
   * const logros = await prisma.logros.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends logrosCreateManyArgs>(args?: Prisma.SelectSubset<T, logrosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Logros.
   * @param {logrosDeleteArgs} args - Arguments to delete one Logros.
   * @example
   * // Delete one Logros
   * const Logros = await prisma.logros.delete({
   *   where: {
   *     // ... filter to delete one Logros
   *   }
   * })
   * 
   */
  delete<T extends logrosDeleteArgs>(args: Prisma.SelectSubset<T, logrosDeleteArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Logros.
   * @param {logrosUpdateArgs} args - Arguments to update one Logros.
   * @example
   * // Update one Logros
   * const logros = await prisma.logros.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends logrosUpdateArgs>(args: Prisma.SelectSubset<T, logrosUpdateArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Logros.
   * @param {logrosDeleteManyArgs} args - Arguments to filter Logros to delete.
   * @example
   * // Delete a few Logros
   * const { count } = await prisma.logros.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends logrosDeleteManyArgs>(args?: Prisma.SelectSubset<T, logrosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Logros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Logros
   * const logros = await prisma.logros.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends logrosUpdateManyArgs>(args: Prisma.SelectSubset<T, logrosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Logros.
   * @param {logrosUpsertArgs} args - Arguments to update or create a Logros.
   * @example
   * // Update or create a Logros
   * const logros = await prisma.logros.upsert({
   *   create: {
   *     // ... data to create a Logros
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Logros we want to update
   *   }
   * })
   */
  upsert<T extends logrosUpsertArgs>(args: Prisma.SelectSubset<T, logrosUpsertArgs<ExtArgs>>): Prisma.Prisma__logrosClient<runtime.Types.Result.GetResult<Prisma.$logrosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Logros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosCountArgs} args - Arguments to filter Logros to count.
   * @example
   * // Count the number of Logros
   * const count = await prisma.logros.count({
   *   where: {
   *     // ... the filter for the Logros we want to count
   *   }
   * })
  **/
  count<T extends logrosCountArgs>(
    args?: Prisma.Subset<T, logrosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LogrosCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Logros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogrosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LogrosAggregateArgs>(args: Prisma.Subset<T, LogrosAggregateArgs>): Prisma.PrismaPromise<GetLogrosAggregateType<T>>

  /**
   * Group by Logros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {logrosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends logrosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: logrosGroupByArgs['orderBy'] }
      : { orderBy?: logrosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, logrosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogrosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the logros model
 */
readonly fields: logrosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for logros.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__logrosClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the logros model
 */
export interface logrosFieldRefs {
  readonly idLogro: Prisma.FieldRef<"logros", 'Int'>
  readonly nombreLogro: Prisma.FieldRef<"logros", 'String'>
  readonly descripcion: Prisma.FieldRef<"logros", 'String'>
  readonly urlIcono: Prisma.FieldRef<"logros", 'String'>
}
    

// Custom InputTypes
/**
 * logros findUnique
 */
export type logrosFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter, which logros to fetch.
   */
  where: Prisma.logrosWhereUniqueInput
}

/**
 * logros findUniqueOrThrow
 */
export type logrosFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter, which logros to fetch.
   */
  where: Prisma.logrosWhereUniqueInput
}

/**
 * logros findFirst
 */
export type logrosFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter, which logros to fetch.
   */
  where?: Prisma.logrosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of logros to fetch.
   */
  orderBy?: Prisma.logrosOrderByWithRelationInput | Prisma.logrosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for logros.
   */
  cursor?: Prisma.logrosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` logros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` logros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of logros.
   */
  distinct?: Prisma.LogrosScalarFieldEnum | Prisma.LogrosScalarFieldEnum[]
}

/**
 * logros findFirstOrThrow
 */
export type logrosFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter, which logros to fetch.
   */
  where?: Prisma.logrosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of logros to fetch.
   */
  orderBy?: Prisma.logrosOrderByWithRelationInput | Prisma.logrosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for logros.
   */
  cursor?: Prisma.logrosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` logros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` logros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of logros.
   */
  distinct?: Prisma.LogrosScalarFieldEnum | Prisma.LogrosScalarFieldEnum[]
}

/**
 * logros findMany
 */
export type logrosFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter, which logros to fetch.
   */
  where?: Prisma.logrosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of logros to fetch.
   */
  orderBy?: Prisma.logrosOrderByWithRelationInput | Prisma.logrosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing logros.
   */
  cursor?: Prisma.logrosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` logros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` logros.
   */
  skip?: number
  distinct?: Prisma.LogrosScalarFieldEnum | Prisma.LogrosScalarFieldEnum[]
}

/**
 * logros create
 */
export type logrosCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * The data needed to create a logros.
   */
  data: Prisma.XOR<Prisma.logrosCreateInput, Prisma.logrosUncheckedCreateInput>
}

/**
 * logros createMany
 */
export type logrosCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many logros.
   */
  data: Prisma.logrosCreateManyInput | Prisma.logrosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * logros update
 */
export type logrosUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * The data needed to update a logros.
   */
  data: Prisma.XOR<Prisma.logrosUpdateInput, Prisma.logrosUncheckedUpdateInput>
  /**
   * Choose, which logros to update.
   */
  where: Prisma.logrosWhereUniqueInput
}

/**
 * logros updateMany
 */
export type logrosUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update logros.
   */
  data: Prisma.XOR<Prisma.logrosUpdateManyMutationInput, Prisma.logrosUncheckedUpdateManyInput>
  /**
   * Filter which logros to update
   */
  where?: Prisma.logrosWhereInput
  /**
   * Limit how many logros to update.
   */
  limit?: number
}

/**
 * logros upsert
 */
export type logrosUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * The filter to search for the logros to update in case it exists.
   */
  where: Prisma.logrosWhereUniqueInput
  /**
   * In case the logros found by the `where` argument doesn't exist, create a new logros with this data.
   */
  create: Prisma.XOR<Prisma.logrosCreateInput, Prisma.logrosUncheckedCreateInput>
  /**
   * In case the logros was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.logrosUpdateInput, Prisma.logrosUncheckedUpdateInput>
}

/**
 * logros delete
 */
export type logrosDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
  /**
   * Filter which logros to delete.
   */
  where: Prisma.logrosWhereUniqueInput
}

/**
 * logros deleteMany
 */
export type logrosDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which logros to delete
   */
  where?: Prisma.logrosWhereInput
  /**
   * Limit how many logros to delete.
   */
  limit?: number
}

/**
 * logros without action
 */
export type logrosDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the logros
   */
  select?: Prisma.logrosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the logros
   */
  omit?: Prisma.logrosOmit<ExtArgs> | null
}
