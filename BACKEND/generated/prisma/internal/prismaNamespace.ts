
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  avatars: 'avatars',
  categoriascuentos: 'categoriascuentos',
  cuentocategoria: 'cuentocategoria',
  cuentos: 'cuentos',
  favoritos: 'favoritos',
  logros: 'logros',
  paginas: 'paginas',
  progresolectura: 'progresolectura',
  usuariologros: 'usuariologros',
  usuarios: 'usuarios'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "avatars" | "categoriascuentos" | "cuentocategoria" | "cuentos" | "favoritos" | "logros" | "paginas" | "progresolectura" | "usuariologros" | "usuarios"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    avatars: {
      payload: Prisma.$avatarsPayload<ExtArgs>
      fields: Prisma.avatarsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.avatarsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.avatarsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        findFirst: {
          args: Prisma.avatarsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.avatarsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        findMany: {
          args: Prisma.avatarsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>[]
        }
        create: {
          args: Prisma.avatarsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        createMany: {
          args: Prisma.avatarsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.avatarsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        update: {
          args: Prisma.avatarsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        deleteMany: {
          args: Prisma.avatarsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.avatarsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.avatarsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$avatarsPayload>
        }
        aggregate: {
          args: Prisma.AvatarsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAvatars>
        }
        groupBy: {
          args: Prisma.avatarsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AvatarsGroupByOutputType>[]
        }
        count: {
          args: Prisma.avatarsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AvatarsCountAggregateOutputType> | number
        }
      }
    }
    categoriascuentos: {
      payload: Prisma.$categoriascuentosPayload<ExtArgs>
      fields: Prisma.categoriascuentosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.categoriascuentosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.categoriascuentosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        findFirst: {
          args: Prisma.categoriascuentosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.categoriascuentosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        findMany: {
          args: Prisma.categoriascuentosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>[]
        }
        create: {
          args: Prisma.categoriascuentosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        createMany: {
          args: Prisma.categoriascuentosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.categoriascuentosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        update: {
          args: Prisma.categoriascuentosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        deleteMany: {
          args: Prisma.categoriascuentosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.categoriascuentosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.categoriascuentosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriascuentosPayload>
        }
        aggregate: {
          args: Prisma.CategoriascuentosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategoriascuentos>
        }
        groupBy: {
          args: Prisma.categoriascuentosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriascuentosGroupByOutputType>[]
        }
        count: {
          args: Prisma.categoriascuentosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriascuentosCountAggregateOutputType> | number
        }
      }
    }
    cuentocategoria: {
      payload: Prisma.$cuentocategoriaPayload<ExtArgs>
      fields: Prisma.cuentocategoriaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cuentocategoriaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cuentocategoriaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        findFirst: {
          args: Prisma.cuentocategoriaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cuentocategoriaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        findMany: {
          args: Prisma.cuentocategoriaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>[]
        }
        create: {
          args: Prisma.cuentocategoriaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        createMany: {
          args: Prisma.cuentocategoriaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.cuentocategoriaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        update: {
          args: Prisma.cuentocategoriaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        deleteMany: {
          args: Prisma.cuentocategoriaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cuentocategoriaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.cuentocategoriaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentocategoriaPayload>
        }
        aggregate: {
          args: Prisma.CuentocategoriaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCuentocategoria>
        }
        groupBy: {
          args: Prisma.cuentocategoriaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CuentocategoriaGroupByOutputType>[]
        }
        count: {
          args: Prisma.cuentocategoriaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CuentocategoriaCountAggregateOutputType> | number
        }
      }
    }
    cuentos: {
      payload: Prisma.$cuentosPayload<ExtArgs>
      fields: Prisma.cuentosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cuentosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cuentosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        findFirst: {
          args: Prisma.cuentosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cuentosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        findMany: {
          args: Prisma.cuentosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>[]
        }
        create: {
          args: Prisma.cuentosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        createMany: {
          args: Prisma.cuentosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.cuentosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        update: {
          args: Prisma.cuentosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        deleteMany: {
          args: Prisma.cuentosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cuentosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.cuentosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cuentosPayload>
        }
        aggregate: {
          args: Prisma.CuentosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCuentos>
        }
        groupBy: {
          args: Prisma.cuentosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CuentosGroupByOutputType>[]
        }
        count: {
          args: Prisma.cuentosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CuentosCountAggregateOutputType> | number
        }
      }
    }
    favoritos: {
      payload: Prisma.$favoritosPayload<ExtArgs>
      fields: Prisma.favoritosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.favoritosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.favoritosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        findFirst: {
          args: Prisma.favoritosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.favoritosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        findMany: {
          args: Prisma.favoritosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>[]
        }
        create: {
          args: Prisma.favoritosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        createMany: {
          args: Prisma.favoritosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.favoritosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        update: {
          args: Prisma.favoritosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        deleteMany: {
          args: Prisma.favoritosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.favoritosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.favoritosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$favoritosPayload>
        }
        aggregate: {
          args: Prisma.FavoritosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFavoritos>
        }
        groupBy: {
          args: Prisma.favoritosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FavoritosGroupByOutputType>[]
        }
        count: {
          args: Prisma.favoritosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FavoritosCountAggregateOutputType> | number
        }
      }
    }
    logros: {
      payload: Prisma.$logrosPayload<ExtArgs>
      fields: Prisma.logrosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.logrosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.logrosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        findFirst: {
          args: Prisma.logrosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.logrosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        findMany: {
          args: Prisma.logrosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>[]
        }
        create: {
          args: Prisma.logrosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        createMany: {
          args: Prisma.logrosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.logrosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        update: {
          args: Prisma.logrosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        deleteMany: {
          args: Prisma.logrosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.logrosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.logrosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$logrosPayload>
        }
        aggregate: {
          args: Prisma.LogrosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLogros>
        }
        groupBy: {
          args: Prisma.logrosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LogrosGroupByOutputType>[]
        }
        count: {
          args: Prisma.logrosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LogrosCountAggregateOutputType> | number
        }
      }
    }
    paginas: {
      payload: Prisma.$paginasPayload<ExtArgs>
      fields: Prisma.paginasFieldRefs
      operations: {
        findUnique: {
          args: Prisma.paginasFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.paginasFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        findFirst: {
          args: Prisma.paginasFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.paginasFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        findMany: {
          args: Prisma.paginasFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>[]
        }
        create: {
          args: Prisma.paginasCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        createMany: {
          args: Prisma.paginasCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.paginasDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        update: {
          args: Prisma.paginasUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        deleteMany: {
          args: Prisma.paginasDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.paginasUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.paginasUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paginasPayload>
        }
        aggregate: {
          args: Prisma.PaginasAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaginas>
        }
        groupBy: {
          args: Prisma.paginasGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaginasGroupByOutputType>[]
        }
        count: {
          args: Prisma.paginasCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaginasCountAggregateOutputType> | number
        }
      }
    }
    progresolectura: {
      payload: Prisma.$progresolecturaPayload<ExtArgs>
      fields: Prisma.progresolecturaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.progresolecturaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.progresolecturaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        findFirst: {
          args: Prisma.progresolecturaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.progresolecturaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        findMany: {
          args: Prisma.progresolecturaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>[]
        }
        create: {
          args: Prisma.progresolecturaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        createMany: {
          args: Prisma.progresolecturaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.progresolecturaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        update: {
          args: Prisma.progresolecturaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        deleteMany: {
          args: Prisma.progresolecturaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.progresolecturaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.progresolecturaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$progresolecturaPayload>
        }
        aggregate: {
          args: Prisma.ProgresolecturaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProgresolectura>
        }
        groupBy: {
          args: Prisma.progresolecturaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgresolecturaGroupByOutputType>[]
        }
        count: {
          args: Prisma.progresolecturaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProgresolecturaCountAggregateOutputType> | number
        }
      }
    }
    usuariologros: {
      payload: Prisma.$usuariologrosPayload<ExtArgs>
      fields: Prisma.usuariologrosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.usuariologrosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.usuariologrosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        findFirst: {
          args: Prisma.usuariologrosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.usuariologrosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        findMany: {
          args: Prisma.usuariologrosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>[]
        }
        create: {
          args: Prisma.usuariologrosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        createMany: {
          args: Prisma.usuariologrosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.usuariologrosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        update: {
          args: Prisma.usuariologrosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        deleteMany: {
          args: Prisma.usuariologrosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.usuariologrosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.usuariologrosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariologrosPayload>
        }
        aggregate: {
          args: Prisma.UsuariologrosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUsuariologros>
        }
        groupBy: {
          args: Prisma.usuariologrosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsuariologrosGroupByOutputType>[]
        }
        count: {
          args: Prisma.usuariologrosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsuariologrosCountAggregateOutputType> | number
        }
      }
    }
    usuarios: {
      payload: Prisma.$usuariosPayload<ExtArgs>
      fields: Prisma.usuariosFieldRefs
      operations: {
        findUnique: {
          args: Prisma.usuariosFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        findFirst: {
          args: Prisma.usuariosFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        findMany: {
          args: Prisma.usuariosFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>[]
        }
        create: {
          args: Prisma.usuariosCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        createMany: {
          args: Prisma.usuariosCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.usuariosDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        update: {
          args: Prisma.usuariosUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        deleteMany: {
          args: Prisma.usuariosDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.usuariosUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.usuariosUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usuariosPayload>
        }
        aggregate: {
          args: Prisma.UsuariosAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUsuarios>
        }
        groupBy: {
          args: Prisma.usuariosGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsuariosGroupByOutputType>[]
        }
        count: {
          args: Prisma.usuariosCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsuariosCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AvatarsScalarFieldEnum = {
  idAvatar: 'idAvatar',
  nombreAvatar: 'nombreAvatar',
  urlAvatar: 'urlAvatar'
} as const

export type AvatarsScalarFieldEnum = (typeof AvatarsScalarFieldEnum)[keyof typeof AvatarsScalarFieldEnum]


export const CategoriascuentosScalarFieldEnum = {
  idCategoria: 'idCategoria',
  nombreCategoria: 'nombreCategoria',
  descripcion: 'descripcion'
} as const

export type CategoriascuentosScalarFieldEnum = (typeof CategoriascuentosScalarFieldEnum)[keyof typeof CategoriascuentosScalarFieldEnum]


export const CuentocategoriaScalarFieldEnum = {
  idCategoria: 'idCategoria',
  idCuento: 'idCuento'
} as const

export type CuentocategoriaScalarFieldEnum = (typeof CuentocategoriaScalarFieldEnum)[keyof typeof CuentocategoriaScalarFieldEnum]


export const CuentosScalarFieldEnum = {
  idCuento: 'idCuento',
  tituloCuento: 'tituloCuento',
  descripcion: 'descripcion',
  urlPortada: 'urlPortada',
  edadRecomentada: 'edadRecomentada',
  fechaPublicacion: 'fechaPublicacion'
} as const

export type CuentosScalarFieldEnum = (typeof CuentosScalarFieldEnum)[keyof typeof CuentosScalarFieldEnum]


export const FavoritosScalarFieldEnum = {
  idUsuario: 'idUsuario',
  idCuento: 'idCuento',
  fechaAgregado: 'fechaAgregado'
} as const

export type FavoritosScalarFieldEnum = (typeof FavoritosScalarFieldEnum)[keyof typeof FavoritosScalarFieldEnum]


export const LogrosScalarFieldEnum = {
  idLogro: 'idLogro',
  nombreLogro: 'nombreLogro',
  descripcion: 'descripcion',
  urlIcono: 'urlIcono'
} as const

export type LogrosScalarFieldEnum = (typeof LogrosScalarFieldEnum)[keyof typeof LogrosScalarFieldEnum]


export const PaginasScalarFieldEnum = {
  idPagina: 'idPagina',
  idCuento: 'idCuento',
  numeroPagina: 'numeroPagina',
  texto: 'texto',
  urlImagen: 'urlImagen',
  urlAudio: 'urlAudio'
} as const

export type PaginasScalarFieldEnum = (typeof PaginasScalarFieldEnum)[keyof typeof PaginasScalarFieldEnum]


export const ProgresolecturaScalarFieldEnum = {
  idProgreso: 'idProgreso',
  idUsuario: 'idUsuario',
  idCuento: 'idCuento',
  ultimaPaginaLeida: 'ultimaPaginaLeida',
  completado: 'completado',
  fechaActualizacion: 'fechaActualizacion'
} as const

export type ProgresolecturaScalarFieldEnum = (typeof ProgresolecturaScalarFieldEnum)[keyof typeof ProgresolecturaScalarFieldEnum]


export const UsuariologrosScalarFieldEnum = {
  idUsuarioLogo: 'idUsuarioLogo',
  idUsuario: 'idUsuario',
  idLogro: 'idLogro',
  fechaObtenido: 'fechaObtenido'
} as const

export type UsuariologrosScalarFieldEnum = (typeof UsuariologrosScalarFieldEnum)[keyof typeof UsuariologrosScalarFieldEnum]


export const UsuariosScalarFieldEnum = {
  idUsuario: 'idUsuario',
  email: 'email',
  contrase_a: 'contrase_a',
  nombreTutor: 'nombreTutor',
  nombreInfante: 'nombreInfante',
  FechaNacimientoInfante: 'FechaNacimientoInfante',
  idAvatar: 'idAvatar',
  fechaRegistro: 'fechaRegistro'
} as const

export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const avatarsOrderByRelevanceFieldEnum = {
  nombreAvatar: 'nombreAvatar',
  urlAvatar: 'urlAvatar'
} as const

export type avatarsOrderByRelevanceFieldEnum = (typeof avatarsOrderByRelevanceFieldEnum)[keyof typeof avatarsOrderByRelevanceFieldEnum]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const categoriascuentosOrderByRelevanceFieldEnum = {
  nombreCategoria: 'nombreCategoria',
  descripcion: 'descripcion'
} as const

export type categoriascuentosOrderByRelevanceFieldEnum = (typeof categoriascuentosOrderByRelevanceFieldEnum)[keyof typeof categoriascuentosOrderByRelevanceFieldEnum]


export const cuentosOrderByRelevanceFieldEnum = {
  tituloCuento: 'tituloCuento',
  descripcion: 'descripcion',
  urlPortada: 'urlPortada'
} as const

export type cuentosOrderByRelevanceFieldEnum = (typeof cuentosOrderByRelevanceFieldEnum)[keyof typeof cuentosOrderByRelevanceFieldEnum]


export const logrosOrderByRelevanceFieldEnum = {
  nombreLogro: 'nombreLogro',
  descripcion: 'descripcion',
  urlIcono: 'urlIcono'
} as const

export type logrosOrderByRelevanceFieldEnum = (typeof logrosOrderByRelevanceFieldEnum)[keyof typeof logrosOrderByRelevanceFieldEnum]


export const paginasOrderByRelevanceFieldEnum = {
  texto: 'texto',
  urlImagen: 'urlImagen',
  urlAudio: 'urlAudio'
} as const

export type paginasOrderByRelevanceFieldEnum = (typeof paginasOrderByRelevanceFieldEnum)[keyof typeof paginasOrderByRelevanceFieldEnum]


export const usuariosOrderByRelevanceFieldEnum = {
  email: 'email',
  contrase_a: 'contrase_a',
  nombreTutor: 'nombreTutor',
  nombreInfante: 'nombreInfante'
} as const

export type usuariosOrderByRelevanceFieldEnum = (typeof usuariosOrderByRelevanceFieldEnum)[keyof typeof usuariosOrderByRelevanceFieldEnum]



/**
 * Field references
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  avatars?: Prisma.avatarsOmit
  categoriascuentos?: Prisma.categoriascuentosOmit
  cuentocategoria?: Prisma.cuentocategoriaOmit
  cuentos?: Prisma.cuentosOmit
  favoritos?: Prisma.favoritosOmit
  logros?: Prisma.logrosOmit
  paginas?: Prisma.paginasOmit
  progresolectura?: Prisma.progresolecturaOmit
  usuariologros?: Prisma.usuariologrosOmit
  usuarios?: Prisma.usuariosOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

